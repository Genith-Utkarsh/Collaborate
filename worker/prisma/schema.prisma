generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                @id @default(uuid())
  name            String
  email           String                @unique
  password        String?
  avatar          String?
  bio             String?
  year            String
  branch          String
  githubProfile   String?
  githubId        String?               @unique
  githubUsername  String?
  linkedinProfile String?
  portfolioUrl    String?
  skills          String[]
  isVerified      Boolean               @default(false)
  role            String                @default("student")
  authProvider    String                @default("local")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  comments        Comment[]
  projects        Project[]             @relation("UserProjects")
  collaborations  ProjectCollaborator[]
  likedProjects   ProjectLike[]
  following       UserFollow[]          @relation("Following")
  followedBy      UserFollow[]          @relation("FollowedBy")
}

model Project {
  id              String                @id @default(uuid())
  title           String
  description     String
  longDescription String?
  ownerId         String?
  ownerName       String?
  technologies    String[]
  category        String
  githubUrl       String
  liveUrl         String?
  images          String[]
  status          String                @default("active")
  featured        Boolean               @default(false)
  views           Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  comments        Comment[]
  owner           User?                 @relation("UserProjects", fields: [ownerId], references: [id])
  collaborators   ProjectCollaborator[]
  likes           ProjectLike[]
}

model UserFollow {
  id          String @id @default(uuid())
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id])
  following   User   @relation("FollowedBy", fields: [followingId], references: [id])
}

model ProjectLike {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model ProjectCollaborator {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  text      String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
